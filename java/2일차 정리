2024-02-27
4. 객체지향 프로그래밍 구성요소
- 객체지향 프로그래밍이란?
  - 객체의 설계도인 클래스를 작성하고, 객체를 생성하고 프로그램을 구성한다
  - 객체는 소프트웨어 부품 -> 자기일은 자기가 알아서 한다
    예) ArrayList list=new ArrayList();
       for(int i=0;i<3;i++) {} 는 객체지향이 아니고 for(int i=0;i<list.size();i++) {} 가 객체지향이다
  - 자바스크립트 클래스 없이 객체를 바로 만드네 -> 객체기반 프로그래밍
    예) const todo={tno:1,title:'자바공부',finish:false};
  
5. 객체지향 프로그래밍 구성요소
- 캡슐화 : 값(필드)과 기능(메소드)를 모아 클래스를 만들어라
- 정보은닉
	숨겨라(private) -> 케이스를 씌워라
	꼭 필요한 기능만 공개해라
- 상속
- 다형성
	상황에 따라 다르게 동작한다
	- overload
	- override

6. overload
- 함수 이름이 겹쳐도 된다(단 인자가 다르다면)
- 자바는 함수이름으로 함수를 구별하지 않고, 인자와 함수이름으로 함수를 구별한다

(5. Dependency)

7. static
- 꼭 필요한 경우에만 객체를 만들자
	new 연산(객체를 만드는 것)의 비용이 비싸다
	객체가 많으면 관리 부담이 커진다
- 홍길동 학생이 있다. 그 학생의 객체는 몇개? 1개
- static
	객체를 만들지 않고 공유하는 필드나 메소드로 지정한다
	static은 객체 없이도 사용이 가능하다(new 하기전에 사용이 가능하다)
	static은 this를 사용할 수 없다(static은 공유되기 때문이다)
- 엔티티 클래스 : 값을 저장하는 클래스
  작업 클래스 : 전부 static method로 지정할 수 있다
- static은 static 끼리만 접근할 수 있다
- static을 사용할 때는 객체가 아닌 클래스 이름으로 사용한다
	ex) Marine2.전체체력


7. 디자인 패턴
- 개발 중에 자주 만나는 문제와 그 해결책을 정의해놓은 것
- Builder
  객체 생성의 어려움을 덜어준다 -> lombok이 Builder를 만들어준다
  - 빌더를 사용하면
    1. 생성자를 안만들어도 사용자는 원하는 값만 지정해서 객체를 만들 수 있다
    2. 객체를 만들 때 필드의 순서가 헷갈리지 않는다


8. 디자인 패턴 : Singleton

9. 상속

10. override

11. 추상메소드와 추상클래스

12. 인터페이스

13. 예외처리